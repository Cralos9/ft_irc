programa recebe 2 args. port and password
	./ircserv <port> <password>

program should not crash in any circumstances


You must be able to authenticate, set a nickname, a username, join a channel,
send and receive private messages using your reference client.

	◦ All the messages sent from one client to a channel have to be forwarded to
	every other client that joined the channel.
	◦ You must have operators and regular users.
	◦ Then, you have to implement the commands that are specific to channel
	operators:
		∗ KICK - Eject a client from the channel
		∗ INVITE - Invite a client to a channel
		∗ TOPIC - Change or view the channel topic
		∗ MODE - Change the channel’s mode:
			· i: Set/remove Invite-only channel
			· t: Set/remove the restrictions of the TOPIC command to channel
			operators
			· k: Set/remove the channel key (password)
			· o: Give/take channel operator privilege

Key Components
Review the major components of an IRC server in C/C++:

	Socket handling: This manages the connection between clients and the server.
	Command parsing: This interprets commands (e.g., NICK, JOIN, PRIVMSG) sent by the client.
	Concurrency: You’ll use threads to handle multiple clients at the same time.
	Data structures: You'll need to track connected clients, nicknames, and channels.

Basic Structure of the IRC Server

	Setting Up a TCP Server
		The first step is to set up a server that listens for incoming TCP connections.

	Handling IRC Commands
		Once the basic server is set up, you need to parse incoming messages and handle IRC commands like NICK, JOIN, and PRIVMSG.
	
	Storing Client State
		You need to maintain client information such as their nickname and the channel they are in. You can use C++ data structures like std::map or std::unordered_map to store this data.

Concurrency and Synchronization
To safely manage shared resources like client_nicks and channels, especially in a multithreaded environment, you’ll need to use mutexes.